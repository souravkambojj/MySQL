# -*- coding: utf-8 -*-
"""SQL3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1WGfyKqKkVx-JmRZl4zEKy-ehwHFwQAE_

### **Joins**
"""

#A JOIN clause is used to combine rows from two or more tables, based on a related column between them.

"""### **Inner Join**"""

#Returns all the records when there is a match in both tables.

#select o.OrderId, c.CustomerName from                                      #two tables
#Order as o inner join Customer as c 
#on o.CustomerId = c.CustomerId

#select o.OrderId, c.CustomerName, s.ShipperName from
# ((Order as o inner join Customer as c   on o.CustomerId=c.CustomerId) inner join Shipper as s  on o.ShipperId = c.ShipperId)

"""### **Left Join**"""

#returns all the records from left table and matched records from the right table.
#the result from right side will be null, if there is no match.

#select c.CustomerName, o.OrderId from 
#Customer as c  left join  Order as o 
#on c.CutomerId=o.CustomerId     order by c.CustomerName asc

"""### **Right Join**"""

#returns all the records from right table and matched records from the left table.
#the result from left side will be null, if there is no match.

#select o.OrderId, c.CustomerName from 
#Order as o right join Customer as c 
#on o.CustomerId = c.CustomerId

"""### **Full Outer Join**"""

#returns all the records when there is a match in either left or right table.

#select c.CustomerName, o.OrderId from
#Customer as c full outer join Order as o
#on c.CustomerId= o.CustomerId
#order by c.CustomerName;

"""### **Self Join**"""

# a self join is a regular join, but the table is joined by itself

#the following SQL satatement will returns the customers that are from same city

#select a.CustomerName as Name1, b.CustomerName as Name2, a.CityName as city from
#Customer as a, Customer as b
#where a.CustomerId<>b.CustomerId  and a.CityName = b.CityName    oredr by a.CityName

"""### **Union**"""

#The UNION operator is used to combine the result-set of two or more SELECT statements.

    #Each SELECT statement within UNION must have the same number of columns
    #The columns must also have similar data types
    #The columns in each SELECT statement must also be in the same order

# SELECT City, Country FROM Customers
# WHERE Country='Germany'
# UNION
# SELECT City, Country FROM Suppliers
# WHERE Country='Germany'
# ORDER BY City;

"""### **Union all**"""

#the union operator by default select distint values. To allow duplicate values, use union all;

# SELECT City, Country FROM Customers
# WHERE Country='Germany'
# UNION ALL
# SELECT City, Country FROM Suppliers
# WHERE Country='Germany'
# ORDER BY City;

"""### **SQL Constraints**"""

# Constraints can be specified when the table is created with the CREATE TABLE statement, 
# or after the table is created with the ALTER TABLE statement.

"""### **Not Null**"""

#It ensures that a column can't have a NULL value.

#1 while creating table

# CREATE TABLE Persons (
#     ID int NOT NULL,
#     LastName varchar(255) NOT NULL,
#     FirstName varchar(255) NOT NULL,
#     Age int
# );

#2 when table is already created

# ALTER TABLE Persons
# MODIFY Age int NOT NULL;

"""### **Unique**"""

# it ensures that all the values in a column are different.

#1 while table creation

# CREATE TABLE Persons (
#     ID int NOT NULL,
#     LastName varchar(255) NOT NULL,
#     FirstName varchar(255),
#     Age int,
#     UNIQUE (ID)
# );

#2 To name a UNIQUE constraint, and to define a UNIQUE constraint on multiple columns

# CREATE TABLE Persons (
#     ID int NOT NULL,
#     LastName varchar(255) NOT NULL,
#     FirstName varchar(255),
#     Age int,
#     CONSTRAINT UC_Person UNIQUE (ID,LastName)
# );

#3 To create a UNIQUE constraint on the "ID" column when the table is already created

# Alter table Persons
# add unique(ID);

#4 To name a UNIQUE constraint, and to define a UNIQUE constraint on multiple columns

# Alter table Persons
# add constraint uc_id unique(ID,LastName);

#5 To drop a UNIQUE constraint

# Alter table Persons
# drop INDEX uc_id;

"""### **Primary Key**"""

# PRIMARY KEY: A combination of NOT NULL and UNIQUE.
# A table can have many UNIQUE Constraints but can have only one PRIMARY KEY.
# A PRIMARY KEY can consist of a single or multiple columns (fields).

#1 while table creation

# CREATE TABLE Persons (
#     ID int NOT NULL,
#     LastName varchar(255) NOT NULL,
#     FirstName varchar(255),
#     Age int,
#     PRIMARY KEY (ID)
# );

#2 To name a PRIMARY KEY constraint, and to defe a PRIMARY KEY constraint on multiple columns

# CREATE TABLE Persons (
#     ID int NOT NULL,
#     LastName varchar(255) NOT NULL,
#     FirstName varchar(255),
#     Age int,
#     CONSTRAINT PK_Person PRIMARY KEY (ID,LastName)
# );

##########  Note: In the example above there is only ONE PRIMARY KEY (PK_Person).
########## However, the VALUE of the primary key is made up of TWO COLUMNS (ID + LastName).


#3 To create a PRIMARY KEY constraint on the "ID" column when the table is already created

# ALTER TABLE Persons
# ADD PRIMARY KEY (ID);

#4 To name a PRIMARY KEY constraint, and for defining a PRIMARY KEY constraint on multiple columns

# ALTER TABLE Persons
# ADD CONSTRAINT PK_id PRIMARY KEY (ID,LastName);


#5 To drop a PRIMARY KEY constraint

# ALTER TABLE Persons
# DROP PRIMARY KEY;

"""### **Foreign Key**"""

# FOREIGN KEY - Prevents actions that would destroy links between tables

#The table with the foreign key is called the child table,
# and the table with the primary key is called the referenced or parent table.

#1 while table creation:

# CREATE TABLE Orders (
#     OrderID int NOT NULL,
#     OrderNumber int NOT NULL,
#     PersonID int,
#     PRIMARY KEY (OrderID),
#     FOREIGN KEY (PersonID) REFERENCES Persons(PersonID)
# );

#2 To name a Forign key constraint while table creation:

# CREATE TABLE Orders (
#     OrderID int NOT NULL,
#     OrderNumber int NOT NULL,
#     PersonID int,
#     PRIMARY KEY (OrderID),
#     CONSTRAINT FK_PersonOrder FOREIGN KEY (PersonID) REFERENCES Persons(PersonID)
# );


#3 To create a FOREIGN KEY constraint on the "PersonID" column 
#  when the "Orders" table is already created

# ALTER TABLE Orders
# ADD FOREIGN KEY (PersonID) REFERENCES Persons(PersonID);


#4 To allow naming of a FOREIGN KEY constraint, 
# and for defining a FOREIGN KEY constraint on multiple columns

# ALTER TABLE Orders
# ADD CONSTRAINT FK_PersonOrder FOREIGN KEY (PersonID) REFERENCES Persons(PersonID);


#5 To drop a FOREIGN KEY constraint 

# ALTER TABLE Orders
# DROP FOREIGN KEY FK_PersonOrder;

"""### **Check**"""

# CHECK - Ensures that the values in a column satisfies a specific condition

#1 To allow naming of a CHECK constraint, and for defining a CHECK constraint on multiple columns

# CREATE TABLE Persons (
#     ID int NOT NULL,
#     LastName varchar(255) NOT NULL,
#     FirstName varchar(255),
#     Age int,
#     City varchar(255),
#     CONSTRAINT CHK_Person CHECK (Age>=18 AND City='Sandnes')
# );

#2 To create a CHECK constraint on the "Age" column when the table is already created

# ALTER TABLE Persons
# ADD CHECK (Age>=18);

#3 To allow naming of a CHECK constraint, and for defining a CHECK constraint on multiple columns

# ALTER TABLE Persons
# ADD CONSTRAINT CHK_PersonAge CHECK (Age>=18 AND City='Sandnes');


#4 To drop a CHECK constraint

# ALTER TABLE Persons
# DROP CHECK CHK_PersonAge;

"""### **Default**"""

#DEFAULT - Sets a default value for a column if no value is specified

#1 while table creation

# CREATE TABLE Persons (
#     ID int NOT NULL,
#     LastName varchar(255) NOT NULL,
#     FirstName varchar(255),
#     Age int,
#     City varchar(255) DEFAULT 'Fazilka'
# );

#2 To create a DEFAULT constraint on the "City" column when the table is already created

# ALTER TABLE Persons
# ALTER City SET DEFAULT 'Sandnes';

#3 To drop a DEFAULT constraint

# ALTER TABLE Persons
# ALTER City DROP DEFAULT;

"""### **Create Index**"""

#CREATE INDEX - used to create indexes in tables.

# Indexes are used to retrieve data from the database more quickly than otherwise.
# The users cannot see the indexes, they are just used to speed up searches/queries.

#Note: Updating a table with indexes takes more time than updating a table without
# (because the indexes also need an update).

#1 INDEX

# CREATE INDEX index_name
# ON table_name (column1, column2, ...);


#2 UNIQUE INDEX

# CREATE UNIQUE INDEX index_name
# ON table_name (column1, column2, ...);

# Drop Index

# ALTER TABLE table_name
# DROP INDEX index_name;

"""### **Auto Increment**"""

# CREATE TABLE Persons (
#     Personid int NOT NULL AUTO_INCREMENT,
#     LastName varchar(255) NOT NULL,
#     FirstName varchar(255),
#     Age int,
#     PRIMARY KEY (Personid)
# );

# By default, the starting value for AUTO_INCREMENT is 1, and it will increment by 1 for each new record.
# To let the AUTO_INCREMENT sequence start with another value uss the following command:

# ALTER TABLE Persons AUTO_INCREMENT=100;