# -*- coding: utf-8 -*-
"""SQL1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1z5Zp8Q4D4utZBvK23QlGWeA_WNk6N-58

## SQL
"""

#structured query language

#This is a std. database language used by all RDBMS(like Mysql, SQLserver, Oracle, Msaccess, Informix, Postgres)
#for storing, retrieving and manipulating the data from their databases.

#In RDBMS data is stored in the from of tables:
  #Each field is a column in the table.
  #Each record is a row in the table.

# SQl  Keywords are not case sensitive: select is same as SELECT.
  #but field names and data in the table cells is case sensitive.

"""## Select"""

# select * from Table_name;

# select col1, col2,...,coln from table_name;

# select distinct coln from table_name;                   #it retrurns unique entries of coln

# select distinct col1, col2, col3 from table_name;       # it will return all the records(only for col1,col2,col3) against the unique entries of col1

"""## Where Clause"""

# select col1,col2,..,coln from table_name  where condition;

"""## Operators in where clause

"""

#SELECT * FROM Customers WHERE Country = 'Germany'
#SELECT * FROM Customers WHERE id=25

#SELECT * FROM Customers WHERE Country<>'Mexico';

#SELECT * FROM Products WHERE Price > 30;
#SELECT * FROM Products WHERE Price < 100;

#SELECT * FROM Products WHERE Price <= 50;
#SELECT * FROM Products WHERE Price >= 50;

#SELECT * FROM Products WHERE Price BETWEEN 50 AND 60;                       #selects values within a given range.
#SELECT * FROM Products WHERE Price not BETWEEN 50 AND 60;

#SELECT * FROM Customers where City in ('London','Lille','Sevilla')             #for string matching
#SELECT * FROM Customers where City not in ('London','Lille','Sevilla')

#SELECT ProductName, Price FROM Products WHERE Price in (10 , 20,30)            #for numeric values

# SELECT * FROM Customers WHERE City LIKE 'f%';                              #used to search for a specified pattern in a column.
# SELECT * FROM Customers WHERE City LIKE '%i%';
# SELECT * FROM Customers WHERE City LIKE '_u%';

"""### WildCards"""

# '%'     zero,one or more characters
#SELECT * FROM Customers WHERE City LIKE '%es%';

# '_' a single character
#SELECT * FROM Customers WHERE City LIKE 'L_n_on';

#'[]' any single character within the brackets
#SELECT * FROM Customers WHERE City LIKE '[lbs]%';

#'[-]' a range of characters
#SELECT * FROM Customers WHERE City LIKE '[b-p]%';
#SELECT * FROM Customers WHERE City NOT LIKE '[b-p]%';

"""### And OR Not Operators"""

# select col1, col2 from table_name where cond1 and cond2 and cond3;
#SELECT * FROM Customers WHERE Country='Germany' and City like 'B%' and 	ContactName like 'M%' ;

# select col1, col2 from table_name where cond1 or cond2 or cond3;             
#SELECT * FROM Customers WHERE City='Berlin' or City='London' or City='Madrid';

# select col1, col2 from table_name where not condition;
# SELECT * FROM Customers WHERE NOT Country='Germany';

# key points

#'and' operator is applied b/w two different fields.
#'or' operator is applied on the same field.

"""## **Count, Avg, Sum, Max, Min**"""

#The COUNT() function returns the number of records that matches a specified criterion.
#SELECT COUNT(*) as countFROM Products;
#SELECT COUNT(*) as count FROM Products where Price>10;

#The AVG() function returns the average value of a numeric column.
#SELECT AVG(Price) as avg_price FROM Products;

#The SUM() function returns the total sum of a numeric column.
#SELECT sum(Price) as total_price FROM Products;

#The MIN() function returns the smallest value of the  numeric column.
#SELECT MIN(Price) AS SmallestPrice FROM Products;

#The MAX() function returns the largest value of the  numeric column.
#SELECT MAX(Price) AS LargestPrice FROM Products;

"""## **Limit Clause**"""

# it is used to select a limited number of records
# select * from table_name where condition  limit = number;
#SELECT * FROM Customers LIMIT 3;

"""## **Order By Clause**"""

# select col1,col2 from table_name where cond orderby col1 asc, col2 desc;
#SELECT * FROM Customers where 	City like 'B%' ORDER BY Country ASC, CustomerName DESC;

#it will first sort all the records in ascending order as per col1
#at a point where values of col1 nd col2 are same, records will be sorted in descending order as per col2.

"""### **Group By Clause**"""

#The GROUP BY statement groups records that have the same values.
#it is often used with aggregate functions (COUNT, MAX, MIN, SUM, AVG).

#SELECT Country, COUNT(*) as count FROM Customers where Country<> 'Germany'  GROUP BY Country ORDER BY COUNT(*) DESC;

"""### **Having Clause**"""

#it is utilized as a conditional clause with Group By clause.
#it is added to SQL because where clause can't be combined with aggregate results.

#like SELECT Country, COUNT(*) as count FROM Customers where COUNT(*)>5  GROUP BY Country ORDER BY COUNT(*) DESC;      #this wouldn't work

#SELECT Country, COUNT(*) as count FROM Customers  GROUP BY Country having COUNT(*)>5 ORDER BY COUNT(*) DESC;

#SELECT Country, COUNT(*) as count FROM Customers  where Country<> 'Germany'  GROUP BY Country having COUNT(*)>5 ORDER BY COUNT(*) DESC;

#select * from table_name
#where condition
#group by col
#having condition
#order by col

"""### **Alias**

### **Alias column syntex**
"""

# select col_name as alias_name from table_name

#select CustomerName as name concat(Address,' ',PostalCode,' ',City,' ',Country) as Address from Customers;

"""### **Alias table syntex**"""

# select * from table_name as alias_name;

#select  o.OrderId, o.OrderDate, c.CustomerName from Customers as c, Orders as o where c.CustomerID= o.CustomerID  and c.CustomerName='sourav';

"""### **Comments**

### **Single line comment**
"""

#       select * from customers --where name='sourav';

"""### **Multi-line comment**"""

#    /*select * from customers;
#    select * from shippers;
#    select * from orders;*/

"""### **Exists Operator**"""

#The EXISTS operator returns true if the subquery returns one or more records.

#The following SQL statement returns TRUE and lists the ProductName that has quantity =10
#SELECT ProductName  FROM Products as p WHERE exists (SELECT ProductID FROM OrderDetails as o  WHERE Quantity = 10 and p.ProductID=o.ProductID);


#alternate query for same result
#SELECT ProductName  FROM Products WHERE ProductID in (SELECT ProductID FROM OrderDetails WHERE Quantity = 10);

"""### **Any Operator**"""

#The ANY operator returns true if any of the subquery values meet the condition.
#The following SQL statement returns TRUE and lists the product names if it finds ANY records in the OrderDetails table that quantity = 10

#SELECT ProductName  FROM Products WHERE ProductID = ANY (SELECT ProductID FROM OrderDetails WHERE Quantity = 10);

"""### **All Operator**"""

#The ALL operator returns true if all of the subquery values meet the condition.
#The following SQL statement returns TRUE and lists the product names 
#if ALL the records in the OrderDetails table has quantity = 10 
#(so, this example will return FALSE, because not ALL records in the OrderDetails table has quantity = 10)

#SELECT ProductName FROM Products WHERE ProductID = ALL (SELECT ProductID FROM OrderDetails WHERE Quantity = 10);

"""### **Case Statement**"""

#through conditions and returns a value when the first condition is met



# select OrderID, Quantity,
# case
# 	when Quantity >30 then 'quatity is greater than 30'
#     when Quantity = 30  then 'quantity is equals to 30'
#     else 'quantity is less than 30'
# end as Qunatity_text



# select CustomerName, City, Country from Customers
# order by 
# (case 
# 	when City is null then Country
#     else City
# end)

"""### **Null functions**"""

#it returns an alternative value if an expression is NULL:
#SELECT ProductName, UnitPrice * IFNULL(UnitsOnOrder, 0) FROM Products;

"""### **Null Values**"""

# A field with a Null Value is a field with no value.

# A Null value is different from a zero value. A feild with a Null value is one that has been
# left blank during record creation.

# How to test for Null values?

# Null values can't be test with comparison operator, such as =, <>.
# we will have to use the IS NULL/ IS NOT NULL operators instead.

# select col1, col2 from table_name where col1 is null;
# select col1, col2 from table_name where col1 is not null;

"""### **Working with Dates**"""

# SELECT * FROM Orders WHERE OrderDate='2008-11-11'